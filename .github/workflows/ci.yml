# Heavily inspired (i.e. copy/paste) from https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on:
  push:
  pull_request:
  release:
  # tags:
  # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
            generators: "Xcode"
          }

    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Checkout submodules using a PAT
        shell: bash
        run: |
          git config --file .gitmodules --get-regexp url | while read url; do
          git config --file=.gitmodules $(echo "$url" | sed -E "s/git@github.com:|https:\/\/github.com\//https:\/\/${{ secrets.GHACTIONS_PAT }}:${{ secrets.GHACTIONS_PAT }}@github.com\//")
          done
          git submodule sync
          git submodule update --init --recursive

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.os, 'ubuntu-latest')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake python3.8
          ninja --version
          cmake --version
          gcc --version
          python -m pip install conan
          conan --version
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja conan
          ninja --version
          cmake --version
          conan --version

      - name: Configure on Mac
        shell: bash
        if: startsWith(matrix.config.os, 'macos')
        run: |
          mkdir build && cd build
          conan install ..
          cmake \
            -S .. \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}"
      - name: Configure on Ubuntu
        shell: bash
        if: startsWith(matrix.config.os, 'ubuntu-latest')
        run: |
           mkdir build && cd build
           conan install .. -s compiler.libcxx=libstdc++11
           cmake \
             -S .. \
             -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
             -G "${{ matrix.config.generators }}"
      - name: Build
        shell: bash
        run: |
          cmake --build build --config ${{ matrix.config.build_type }}
      - name: Test
        shell: bash
        run: |
          cd build/bin
          ./lc3_vm_tests